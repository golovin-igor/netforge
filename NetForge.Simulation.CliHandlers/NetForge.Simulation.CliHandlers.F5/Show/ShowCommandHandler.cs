using NetForge.Interfaces.CLI;
using NetForge.Simulation.Common.CLI.Base;
using NetForge.Simulation.Common.Common;

namespace NetForge.Simulation.CliHandlers.F5.Show
{
    /// <summary>
    /// F5 BIG-IP show command handler
    /// </summary>
    public class ShowCommandHandler : VendorAgnosticCliHandler
    {
        public ShowCommandHandler() : base("show", "Show system information and configuration")
        {
            AddAlias("sh");
            AddAlias("sho");
        }

        protected override async Task<CliResult> ExecuteCommandAsync(ICliContext context)
        {
            if (!IsVendor(context, "F5"))
            {
                return RequireVendor(context, "F5");
            }

            var device = context.Device;
            if (device == null)
            {
                return Error(CliErrorType.InvalidCommand, "Device not found");
            }

            if (context.CommandParts.Length == 1)
            {
                // Default show command
                var output = $"""
                              F5 BIG-IP System Information
                              =============================
                              Hostname: {device.GetHostname()}
                              Vendor: {device.Vendor}
                              Model: BIG-IP 3900
                              Management IP: 192.168.1.100

                              Available show commands:
                                show version
                                show running-config
                                show interfaces
                                show ltm pool
                                show ltm virtual
                                show ltm node
                                show gtm
                                show asm
                                show apm
                                show net
                                show sys
                              """;
                return Success(output);
            }

            var subCommand = context.CommandParts[1].ToLower();
            return subCommand switch
            {
                "version" => ShowVersion(device),
                "running-config" => ShowRunningConfig(device),
                "interfaces" => ShowInterfaces(device),
                "arp" => ShowArp(device),
                "ltm" => ShowLtm(device, context.CommandParts.Skip(2).ToArray()),
                "gtm" => ShowGtm(device),
                "asm" => ShowAsm(device),
                "apm" => ShowApm(device),
                "net" => ShowNet(device),
                "sys" => ShowSys(device),
                _ => Error(CliErrorType.InvalidCommand, $"Unknown show command: {subCommand}\nUse 'show ?' for available commands")
            };
        }

        private CliResult ShowVersion(INetworkDevice device)
        {
            var output = """
                         F5 BIG-IP System
                         =================
                         Product: BIG-IP
                         Version: 16.1.3.2
                         Build: 0.0.10
                         Edition: Point Release 2
                         Date: Jan 15, 2024
                         Time: 14:30:00
                         Uptime: 45 days, 12 hours, 30 minutes
                         Memory: 16384 MB
                         CPU: 8 cores
                         """;
            return Success(output);
        }

        private CliResult ShowRunningConfig(INetworkDevice device)
        {
            var output = $"""
                          ! F5 BIG-IP Configuration
                          ! Generated by NetForge Simulation
                          !
                          hostname {device.GetHostname()}
                          !
                          ! Interface Configuration
                          interface 1.1
                            description Management Interface
                            ip address 192.168.1.100 255.255.255.0
                            enabled
                          !
                          ! LTM Configuration
                          ltm pool web_pool
                            members 192.168.1.10:80
                            members 192.168.1.11:80
                            monitor http
                          !
                          ltm virtual web_virtual
                            destination 10.0.0.100:80
                            pool web_pool
                            profiles http
                          !
                          """;
            return Success(output);
        }

        private CliResult ShowInterfaces(INetworkDevice device)
        {
            var output = """
                         Interface Status Information
                         ===========================
                         Interface  Status  IP Address      Netmask
                         ---------  ------  --------------  --------------
                         1.1        UP      192.168.1.100   255.255.255.0
                         1.2        UP      10.0.0.1        255.255.255.0
                         1.3        DOWN    0.0.0.0         0.0.0.0
                         1.4        UP      172.16.0.1      255.255.0.0
                         """;
            return Success(output);
        }

        private CliResult ShowLtm(INetworkDevice device, string[] args)
        {
            if (args.Length == 0)
            {
                var output = """
                             LTM (Local Traffic Manager) Objects
                             ===================================
                             Available objects:
                               pool
                               virtual
                               node
                               monitor
                               profile
                             """;
                return Success(output);
            }

            var objectType = args[0].ToLower();
            return objectType switch
            {
                "pool" => ShowLtmPool(device),
                "virtual" => ShowLtmVirtual(device),
                "node" => ShowLtmNode(device),
                _ => Error(CliErrorType.InvalidCommand, $"Unknown LTM object type: {objectType}")
            };
        }

        private CliResult ShowLtmPool(INetworkDevice device)
        {
            var output = @"LTM Pool Information
====================
Pool Name    Members              Monitor  Status
---------    -------              -------  ------
web_pool     192.168.1.10:80     http     UP
             192.168.1.11:80
db_pool      192.168.2.10:3306   tcp      UP
             192.168.2.11:3306";
            return Success(output);
        }

        private CliResult ShowLtmVirtual(INetworkDevice device)
        {
            var output = @"LTM Virtual Server Information
==============================
Virtual Name    Destination        Pool      Status
------------    -----------        ----      ------
web_virtual     10.0.0.100:80     web_pool  UP
api_virtual     10.0.0.101:443    api_pool  UP
db_virtual      10.0.0.102:3306   db_pool   UP";
            return Success(output);
        }

        private CliResult ShowLtmNode(INetworkDevice device)
        {
            var output = @"LTM Node Information
====================
Node Address    Status    Monitor Status
------------    ------    -------------
192.168.1.10    UP        UP
192.168.1.11    UP        UP
192.168.2.10    UP        UP
192.168.2.11    UP        UP";
            return Success(output);
        }

        private CliResult ShowGtm(INetworkDevice device)
        {
            var output = @"GTM (Global Traffic Manager) Information
=======================================
GTM is not licensed on this system.
Contact F5 Networks for licensing information.";
            return Success(output);
        }

        private CliResult ShowAsm(INetworkDevice device)
        {
            var output = @"ASM (Application Security Manager) Information
============================================
ASM is not licensed on this system.
Contact F5 Networks for licensing information.";
            return Success(output);
        }

        private CliResult ShowApm(INetworkDevice device)
        {
            var output = @"APM (Access Policy Manager) Information
=======================================
APM is not licensed on this system.
Contact F5 Networks for licensing information.";
            return Success(output);
        }

        private CliResult ShowNet(INetworkDevice device)
        {
            var output = @"Network Configuration
====================
Route Domain: 0
VLAN: 1
Self IP: 192.168.1.100
Gateway: 192.168.1.1";
            return Success(output);
        }

        private CliResult ShowArp(INetworkDevice device)
        {
            var table = device.GetArpTableOutput();
            if (string.IsNullOrEmpty(table))
                return Success("ARP table is empty.\n");
            return Success(table);
        }

        private CliResult ShowSys(INetworkDevice device)
        {
            var output = $@"System Information
=================
Hostname: {device.GetHostname()}
Platform: BIG-IP 3900
Version: 16.1.3.2
Uptime: 45 days, 12 hours, 30 minutes
Memory: 16384 MB
CPU: 8 cores";
            return Success(output);
        }
    }
}
