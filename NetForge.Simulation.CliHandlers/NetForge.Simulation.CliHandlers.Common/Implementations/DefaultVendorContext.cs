using System.Text;
using NetForge.Simulation.Common.CLI.Interfaces;
using NetForge.Simulation.Common.Common;
using NetForge.Simulation.Common.Interfaces;

namespace NetForge.Simulation.Common.CLI.Implementations
{
    /// <summary>
    /// Default vendor context implementation for devices without specific vendor contexts
    /// </summary>
    public class DefaultVendorContext(INetworkDevice device) : IVendorContext
    {
        private readonly DefaultVendorCapabilities _capabilities = new(device);

        public string VendorName => device.Vendor ?? "Unknown";
        public IVendorCapabilities Capabilities => _capabilities;
        public ICandidateConfiguration? CandidateConfig => null; // Default devices don't support candidate config

        public bool IsInMode(string mode)
        {
            return device.GetCurrentMode().Equals(mode, StringComparison.OrdinalIgnoreCase);
        }

        public string GetModePrompt()
        {
            return device.GetPrompt();
        }

        public string GetCommandHelp(string command)
        {
            return $"Help for command '{command}' is not available for vendor {VendorName}";
        }

        public IEnumerable<string> GetCommandCompletions(string[] commandParts)
        {
            return Array.Empty<string>();
        }

        public string PreprocessCommand(string command)
        {
            return command; // No preprocessing by default
        }

        public string PostprocessOutput(string output)
        {
            return output; // No postprocessing by default
        }

        public string RenderConfiguration(object configData)
        {
            return configData?.ToString() ?? "";
        }

        public string GetCurrentInterface()
        {
            return device.GetCurrentInterface();
        }
    }

    /// <summary>
    /// Default vendor capabilities implementation
    /// </summary>
    public class DefaultVendorCapabilities(INetworkDevice device) : IVendorCapabilities
    {
        public string GetRunningConfiguration()
        {
            // Generate a comprehensive running configuration based on device state
            var config = new StringBuilder();

            // Header
            config.Append("!").AppendLine();
            config.Append($"! Running configuration for {device.Name}").AppendLine();
            config.Append($"! Generated by NetForge Simulation at {DateTime.Now:yyyy-MM-dd HH:mm:ss}").AppendLine();
            config.Append("!").AppendLine();

            // Basic device settings
            config.Append($"hostname {device.Name}").AppendLine();
            config.Append("!").AppendLine();

            // Interface configurations
            var interfaces = device.GetAllInterfaces();
            foreach (var iface in interfaces.Values.OrderBy(i => i.Name))
            {
                config.Append($"interface {iface.Name}").AppendLine();

                if (!string.IsNullOrEmpty(iface.Description))
                {
                    config.Append($" description {iface.Description}").AppendLine();
                }

                if (!string.IsNullOrEmpty(iface.IpAddress))
                {
                    config.Append($" ip address {iface.IpAddress} {iface.SubnetMask ?? "255.255.255.0"}").AppendLine();
                }

                if (iface.IsShutdown)
                {
                    config.Append(" shutdown").AppendLine();
                }
                else
                {
                    config.Append(" no shutdown").AppendLine();
                }

                config.Append("!").AppendLine();
            }

            // System settings
            var systemSettings = device.GetSystemSettings();
            if (systemSettings.Any())
            {
                config.Append("! System settings").AppendLine();
                foreach (var setting in systemSettings)
                {
                    config.Append($"{setting.Key} {setting.Value}").AppendLine();
                }

                config.Append("!").AppendLine();
            }

            // VLANs
            var vlans = device.GetAllVlans();
            if (vlans.Any())
            {
                config.Append("! VLAN configuration").AppendLine();
                foreach (var vlan in vlans.Values.OrderBy(v => v.Id))
                {
                    config.Append($"vlan {vlan.Id}").AppendLine();
                    if (!string.IsNullOrEmpty(vlan.Name))
                    {
                        config.Append($" name {vlan.Name}").AppendLine();
                    }

                    config.Append("!").AppendLine();
                }
            }

            // Routing configuration
            var routes = device.GetRoutingTable();
            if (routes.Any())
            {
                config.Append("! Static routes").AppendLine();
                foreach (var route in routes.OrderBy(r => r.Network))
                {
                    config.Append($"ip route {route.Network} {route.Mask} {route.NextHop}").AppendLine();
                }

                config.Append("!").AppendLine();
            }

            // Configuration end
            config.Append("end").AppendLine();

            return config.ToString();
        }

        public string GetStartupConfiguration()
        {
            return GetRunningConfiguration(); // Default to running config
        }

        public void SetDeviceMode(string mode)
        {
            device.SetCurrentMode(mode);
        }

        public string GetDeviceMode()
        {
            return device.GetCurrentMode();
        }

        public bool SupportsMode(string mode)
        {
            // Default implementation - check against common modes
            var commonModes = new[] { "user", "privileged", "config", "interface" };
            return commonModes.Contains(mode.ToLowerInvariant());
        }

        public IEnumerable<string> GetAvailableModes()
        {
            return new[] { "user", "privileged", "config" };
        }

        public string FormatCommandOutput(string command, object? data = null)
        {
            return data?.ToString() ?? "";
        }

        public string GetVendorErrorMessage(string errorType, string? context = null)
        {
            return errorType switch
            {
                "invalid_command" => "% Invalid command",
                "incomplete_command" => "% Incomplete command",
                "invalid_parameter" => "% Invalid parameter",
                "invalid_mode" => "% Command not available in current mode",
                _ => $"% Error: {errorType}"
            };
        }

        public bool SupportsFeature(string feature)
        {
            // Default implementation - basic features only
            var basicFeatures = new[] { "ping", "show", "configure" };
            return basicFeatures.Contains(feature.ToLowerInvariant());
        }

        public string FormatInterfaceName(string interfaceName)
        {
            return interfaceName; // No formatting by default
        }

        public bool ValidateVendorSyntax(string[] commandParts, string command)
        {
            return commandParts.Length > 0; // Basic validation
        }

        // Interface configuration methods - default implementations
        public bool ConfigureInterfaceIp(string interfaceName, string ipAddress, string subnetMask)
        {
            // Default implementation - not supported
            return false;
        }

        public bool RemoveInterfaceIp(string interfaceName)
        {
            // Default implementation - not supported
            return false;
        }

        public bool ApplyAccessGroup(string interfaceName, int aclNumber, string direction)
        {
            // Default implementation - not supported
            return false;
        }

        public bool RemoveAccessGroup(string interfaceName)
        {
            // Default implementation - not supported
            return false;
        }

        public bool SetInterfaceShutdown(string interfaceName, bool shutdown)
        {
            // Default implementation - not supported
            return false;
        }

        // VLAN management methods - default implementations
        public bool CreateOrSelectVlan(int vlanId)
        {
            // Default implementation - not supported
            return false;
        }

        // Routing protocol initialization methods - default implementations
        public bool InitializeOspf(int processId)
        {
            // Default implementation - not supported
            return false;
        }

        public bool InitializeBgp(int asNumber)
        {
            // Default implementation - not supported
            return false;
        }

        public bool InitializeRip()
        {
            // Default implementation - not supported
            return false;
        }

        public bool InitializeEigrp(int asNumber)
        {
            // Default implementation - not supported
            return false;
        }

        public bool SetCurrentRouterProtocol(string protocol)
        {
            // Default implementation - not supported
            return false;
        }

        // ACL management methods
        public bool AddAclEntry(int aclNumber, object aclEntry)
        {
            device.AddLogEntry($"ACL entry added to access list {aclNumber} (default implementation)");
            return true;
        }

        public bool SetCurrentAclNumber(int aclNumber)
        {
            device.AddLogEntry($"Current ACL number set to {aclNumber} (default implementation)");
            return true;
        }

        public int GetCurrentAclNumber()
        {
            return 0; // Default implementation
        }

        // Configuration management methods
        public bool AppendToRunningConfig(string configLine)
        {
            device.AddLogEntry($"Config line added: {configLine} (default implementation)");
            return true;
        }

        // VLAN management methods (additional)
        public bool AddInterfaceToVlan(string interfaceName, int vlanId)
        {
            device.AddLogEntry($"Interface {interfaceName} added to VLAN {vlanId} (default implementation)");
            return true;
        }

        public bool VlanExists(int vlanId)
        {
            return true; // Default implementation - assume VLAN exists
        }

        public bool SetVlanName(int vlanId, string name)
        {
            device.AddLogEntry($"VLAN {vlanId} name set to {name} (default implementation)");
            return true;
        }

        // Spanning Tree Protocol methods
        public bool SetStpMode(string mode)
        {
            device.AddLogEntry($"Spanning tree mode set to {mode} (default implementation)");
            return true;
        }

        public bool SetStpVlanPriority(int vlanId, int priority)
        {
            device.AddLogEntry($"STP priority set to {priority} for VLAN {vlanId} (default implementation)");
            return true;
        }

        public bool SetStpPriority(int priority)
        {
            device.AddLogEntry($"Global STP priority set to {priority} (default implementation)");
            return true;
        }

        public bool EnablePortfast(string interfaceName)
        {
            device.AddLogEntry($"PortFast enabled on interface {interfaceName} (default implementation)");
            return true;
        }

        public bool DisablePortfast(string interfaceName)
        {
            device.AddLogEntry($"PortFast disabled on interface {interfaceName} (default implementation)");
            return true;
        }

        public bool EnablePortfastDefault()
        {
            device.AddLogEntry("PortFast enabled by default on all access ports (default implementation)");
            return true;
        }

        public bool EnableBpduGuard(string interfaceName)
        {
            device.AddLogEntry($"BPDU Guard enabled on interface {interfaceName} (default implementation)");
            return true;
        }

        public bool DisableBpduGuard(string interfaceName)
        {
            device.AddLogEntry($"BPDU Guard disabled on interface {interfaceName} (default implementation)");
            return true;
        }

        public bool EnableBpduGuardDefault()
        {
            device.AddLogEntry("BPDU Guard enabled by default (default implementation)");
            return true;
        }

        // Port Channel methods
        public bool CreateOrUpdatePortChannel(int channelId, string interfaceName, string mode)
        {
            device.AddLogEntry($"Port channel {channelId} updated with interface {interfaceName} in {mode} mode (default implementation)");
            return true;
        }

        // CDP methods
        public bool EnableCdpGlobal()
        {
            device.AddLogEntry("CDP enabled globally (default implementation)");
            return true;
        }

        public bool DisableCdpGlobal()
        {
            device.AddLogEntry("CDP disabled globally (default implementation)");
            return true;
        }

        public bool EnableCdpInterface(string interfaceName)
        {
            device.AddLogEntry($"CDP enabled on interface {interfaceName} (default implementation)");
            return true;
        }

        public bool DisableCdpInterface(string interfaceName)
        {
            device.AddLogEntry($"CDP disabled on interface {interfaceName} (default implementation)");
            return true;
        }

        public bool SetCdpTimer(int seconds)
        {
            device.AddLogEntry($"CDP timer set to {seconds} seconds (default implementation)");
            return true;
        }

        public bool SetCdpHoldtime(int seconds)
        {
            device.AddLogEntry($"CDP holdtime set to {seconds} seconds (default implementation)");
            return true;
        }

        // Hostname and system methods
        public bool SetHostname(string hostname)
        {
            device.AddLogEntry($"Hostname set to {hostname} (default implementation)");
            return true;
        }

        // Interface state methods
        public bool SetInterfaceDescription(string interfaceName, string description)
        {
            var iface = device.GetInterface(interfaceName);
            if (iface != null)
            {
                iface.Description = description;
                device.AddLogEntry($"Interface {interfaceName} description set to: {description}");
                return true;
            }
            return false;
        }

        public bool SetSwitchportMode(string interfaceName, string mode)
        {
            var iface = device.GetInterface(interfaceName);
            if (iface != null)
            {
                iface.SwitchportMode = mode;
                device.AddLogEntry($"Interface {interfaceName} switchport mode set to {mode}");
                return true;
            }
            return false;
        }

        public bool SetInterfaceVlan(string interfaceName, int vlanId)
        {
            var iface = device.GetInterface(interfaceName);
            if (iface != null)
            {
                iface.VlanId = vlanId;
                device.AddLogEntry($"Interface {interfaceName} VLAN set to {vlanId}");
                return true;
            }
            return false;
        }

        // Additional required interface methods
        public bool SetCurrentInterface(string interfaceName)
        {
            device.AddLogEntry($"Current interface set to {interfaceName} (default implementation)");
            return true;
        }

        public bool SetInterfaceState(string interfaceName, string state)
        {
            var iface = device.GetInterface(interfaceName);
            if (iface != null)
            {
                switch (state.ToLowerInvariant())
                {
                    case "up":
                    case "enable":
                        iface.IsShutdown = false;
                        break;
                    case "down":
                    case "disable":
                    case "shutdown":
                        iface.IsShutdown = true;
                        break;
                }
                device.AddLogEntry($"Interface {interfaceName} state set to {state}");
                return true;
            }
            return false;
        }

        public bool SetInterface(string interfaceName, string property, object value)
        {
            var iface = device.GetInterface(interfaceName);
            if (iface != null)
            {
                device.AddLogEntry($"Interface {interfaceName} property {property} set to {value} (default implementation)");
                return true;
            }
            return false;
        }

        public bool SaveConfiguration()
        {
            device.AddLogEntry("Configuration saved successfully (default implementation)");
            return true;
        }

        public bool ReloadDevice()
        {
            device.AddLogEntry("Device reload initiated (default implementation)");
            return true;
        }
    }
}
